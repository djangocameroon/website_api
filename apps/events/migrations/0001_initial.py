# Generated by Django 5.2.4 on 2025-07-06 16:00

import apps.events.models.constants
import utils.main
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AvailableSocialMedia',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the social media platform', max_length=50, verbose_name='Social Media Platform Name')),
                ('link', models.URLField(help_text='Link to the social media platform', verbose_name='Social Media Platform Link')),
                ('active', models.BooleanField(default=True, help_text='Is the social media platform active?', verbose_name='Is Active')),
            ],
            options={
                'verbose_name': 'Available Social Media',
                'verbose_name_plural': 'Available Social Media',
                'db_table': 'available_social_media',
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.UUIDField(default=utils.main.generate_uuid, editable=False, help_text='Unique identifier for this object', primary_key=True, serialize=False)),
                ('active', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('category', models.CharField(choices=[('Workshops', 'Workshops'), ('Talks', 'Talks')], default=apps.events.models.constants.EventCategory['WORKSHOPS'], help_text='The category of the event', max_length=50, verbose_name='Event category')),
                ('for_community', models.CharField(choices=[('Django Cameroon', 'Django Cameroon'), ('Django Girls Cameroon', 'Django Girls Cameroon')], default=apps.events.models.constants.Community['DJANGO_CAMEROON'], help_text='The community the event is for', max_length=50, verbose_name='Event community')),
                ('title', models.CharField(help_text='The title of the event', max_length=100, verbose_name='Event title')),
                ('slug', models.SlugField(max_length=100, unique=True)),
                ('description', models.TextField(help_text='The description of the event', verbose_name='Event description')),
                ('date', models.DateTimeField(help_text='The date of the event', verbose_name='Event date')),
                ('thumbnail', models.URLField(blank=True, help_text='The thumbnail of the event', null=True, verbose_name='Event thumbnail')),
                ('type', models.CharField(choices=[('Online', 'Online'), ('In-person', 'In-person'), ('Hybrid', 'Hybrid')], default=apps.events.models.constants.EventType['IN_PERSON'], help_text='The type of the event', max_length=50, verbose_name='Event type')),
                ('level', models.CharField(blank=True, max_length=50, null=True)),
                ('published', models.BooleanField(default=False, help_text='Whether the event is published', verbose_name='Event published')),
            ],
            options={
                'verbose_name': 'Event',
                'verbose_name_plural': 'Events',
                'db_table': 'events',
            },
        ),
        migrations.CreateModel(
            name='EventCity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='EventRegion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='EventTag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('color', models.CharField(max_length=10)),
            ],
            options={
                'verbose_name': 'Event tag',
                'verbose_name_plural': 'Event tags',
                'db_table': 'event_tags',
            },
        ),
        migrations.CreateModel(
            name='EventVenue',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Reservation',
            fields=[
                ('id', models.UUIDField(default=utils.main.generate_uuid, editable=False, help_text='Unique identifier for this object', primary_key=True, serialize=False)),
                ('active', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('check_in', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Reservation',
                'verbose_name_plural': 'Reservations',
                'db_table': 'reservations',
            },
        ),
        migrations.CreateModel(
            name='Speaker',
            fields=[
                ('id', models.UUIDField(default=utils.main.generate_uuid, editable=False, help_text='Unique identifier for this object', primary_key=True, serialize=False)),
                ('active', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(help_text="Speaker's full name", max_length=50, verbose_name='Full Name')),
                ('photo', models.URLField(default='https://via.placeholder.com/150', help_text="Speaker's photo", verbose_name='Photo URL')),
                ('bio', models.TextField(blank=True, help_text="Speaker's bio", null=True, verbose_name='Biography')),
                ('slug', models.SlugField(blank=True, null=True, unique=True)),
            ],
            options={
                'verbose_name': 'Speaker',
                'verbose_name_plural': 'Speakers',
                'db_table': 'speakers',
            },
        ),
        migrations.CreateModel(
            name='SpeakerSocialMedia',
            fields=[
                ('id', models.UUIDField(default=utils.main.generate_uuid, editable=False, help_text='Unique identifier for this object', primary_key=True, serialize=False)),
                ('active', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('handle', models.CharField(help_text='Social media handle', max_length=50, verbose_name='Handle')),
            ],
            options={
                'verbose_name': 'Speaker Social Media',
                'verbose_name_plural': 'Speaker Social Media',
                'db_table': 'speaker_social_media',
                'ordering': ['speaker', 'platform'],
            },
        ),
        migrations.CreateModel(
            name='SpeakerSpeciality',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of the speciality', max_length=50, verbose_name='Speciality Name')),
            ],
            options={
                'verbose_name': 'Speaker Speciality',
                'verbose_name_plural': 'Speaker Specialities',
                'db_table': 'speaker_specialities',
            },
        ),
    ]
