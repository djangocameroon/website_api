# Generated by Django 5.0.1 on 2024-02-12 22:07

import apps.events.models.constants
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='BaseModel',
            fields=[
                ('id', models.UUIDField(default='193680df-d758-4ec5-a7a2-a3a9bc6958b2', editable=False, help_text='Unique identifier for this object.', primary_key=True, serialize=False, verbose_name='id')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='Date and time when this object was created.', verbose_name='created at')),
            ],
        ),
        migrations.CreateModel(
            name='EventTag',
            fields=[
                ('id', models.UUIDField(default='b84714c6-231d-42c1-a83c-2b961a7494cd', editable=False, help_text='Unique identifier for this object.', primary_key=True, serialize=False, verbose_name='id')),
                ('tag', models.CharField(max_length=50)),
                ('color', models.CharField(max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='Speaker',
            fields=[
                ('id', models.UUIDField(default='410461ab-6439-4427-8f65-fbee35949641', editable=False, help_text='Unique identifier for this object.', primary_key=True, serialize=False, verbose_name='id')),
                ('full_name', models.CharField(max_length=50)),
                ('photo', models.ImageField(null=True, upload_to='images/speakers')),
                ('twitter', models.CharField(max_length=50, null=True)),
                ('linkedin', models.CharField(max_length=50, null=True)),
                ('description', models.TextField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('basemodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='events.basemodel')),
                ('category', models.CharField(choices=[('Workshops', 'Workshops'), ('Talks', 'Talks')], default=apps.events.models.constants.EventCategory['WORKSHOPS'], max_length=50)),
                ('for_community', models.CharField(choices=[('Django Cameroon', 'Django Cameroon'), ('Django Girls Cameroon', 'Django Girls Cameroon')], default=apps.events.models.constants.Community['DJANGO_CAMEROON'], max_length=50)),
                ('title', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('location', models.CharField(max_length=100)),
                ('hour', models.TimeField()),
                ('date', models.DateField()),
                ('type', models.CharField(choices=[('Online', 'Online'), ('In-person', 'In-person'), ('Hybrid', 'Hybrid')], default=apps.events.models.constants.EventType['IN_PERSON'], max_length=50)),
                ('published', models.BooleanField(default=False)),
                ('speaker', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='events.speaker')),
                ('tags', models.ManyToManyField(default=None, related_name='events', to='events.eventtag')),
            ],
            bases=('events.basemodel',),
        ),
        migrations.CreateModel(
            name='Reservation',
            fields=[
                ('basemodel_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='events.basemodel')),
                ('email', models.EmailField(max_length=254)),
                ('full_name', models.CharField(max_length=100)),
                ('sex', models.CharField(choices=[('Male', 'Male'), ('Female', 'Female')], default='Male', max_length=10)),
                ('check_in', models.BooleanField(default=False)),
                ('for_event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reservations', to='events.event', verbose_name='event')),
            ],
            bases=('events.basemodel',),
        ),
    ]
